#!/usr/bin/env spack-python
# vim: ft=python

from argparse import ArgumentParser
import json
import os
import shutil

import spack.environment as ev
import spack.store

import llnl.util.tty as tty


def all_installed(spec):
    """Check if a spec and all required runtime dependencies are installed
    """
    if not spec.package.installed:
        return False
    for dep in spec.dependencies(deptype=("link", "run")):
        if not all_installed(dep):
            return False
    return True


def dump_user_friendly_specs(filename, specs):
    """Store the expanded requested specs
    """
    with open(filename, 'w') as fd:
        for spec, dag_hash in specs:
            spec = str(spec)
            if "^" in spec:
                spec = spec[:spec.index("^")].strip()
            fd.write('{} /{}\n'.format(spec, dag_hash[:6]))


def insert_into_graph(env, graph, spec, explicit=False):
    """Construct a dependency graph for a spec
    """
    build_hash = spec.build_hash()
    needed_deps = ("link", "run")
    if not spec.package.installed:
        needed_deps = "all"
        if build_hash in graph:
            graph[build_hash]["explicit"] |= explicit
        else:
            tty.msg(
                'Need to install {s.name}@{s.version} /{h}'.format(
                    s=spec,
                    h=spec.dag_hash(6)
                )
            )
            graph[build_hash] = dict(
                name="{s.name}@{s.version} /{h}".format(
                    s=spec,
                    h=spec.dag_hash(6)
                ),
                dependents=set(),
                dependencies=set(),
                building=False,
                explicit=explicit
            )
    for dep in spec.dependencies(deptype=needed_deps):
        dep_hash = insert_into_graph(env, graph, dep)
        if not spec.package.installed and not dep.package.installed:
            graph[dep_hash]['dependents'].add(build_hash)
            graph[build_hash]['dependencies'].add(dep_hash)
    return build_hash


def run():
    parser = ArgumentParser()
    parser.add_argument('-e', '--env', required=True,
                        help='environment to use')
    parser.add_argument('specfile',
                        help='spec specification to use with the environment')
    parser.add_argument('installfile',
                        help='file to write uninstalled specs into')
    parser.add_argument('userfile',
                        help='file to write all "user" specs into')
    args = parser.parse_args()

    if not os.path.exists(args.env):
        os.makedirs(args.env)
    elif not os.path.isdir(args.env):
        parser.error('environment "{}" must be a directory'.format(args.env))
    shutil.copy(args.specfile, os.path.join(args.env, 'spack.yaml'))

    env = ev.get_env(args, 'deploy', required=True)
    with env.write_transaction():
        concretized_specs = env.concretize(force=True)
        ev.display_specs(s for s in concretized_specs if not all_installed(s[1]))
        env.write(regenerate_views=False)

    dag_hashes = [env.specs_by_hash[h].dag_hash() for h in env.concretized_order]
    dump_user_friendly_specs(args.userfile, zip(env.user_specs, dag_hashes))

    specs = dict()
    with spack.store.db.read_transaction():
        for user_spec, concretized_hash in zip(env.user_specs, env.concretized_order):
            explicit_spec = env.specs_by_hash[concretized_hash]
            insert_into_graph(env, specs, explicit_spec, explicit=True)

    for k in specs:
        specs[k]['dependents'] = list(specs[k]['dependents'])
        specs[k]['dependencies'] = list(specs[k]['dependencies'])
    with open(args.installfile, 'w') as fd:
        json.dump(specs, fd)
        fd.write('\n')


if __name__ == '__main__':
    run()
