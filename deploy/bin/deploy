#!/usr/bin/env python3

from argparse import ArgumentParser
from multiprocessing import Pool
from subprocess import check_call
from tempfile import NamedTemporaryFile
import json
import os
import sys


def install(args):
    try:
        check_call(["build", "-e"] + list(args))
    except Exception as e:
        print(e)
        return False
    return True


parser = ArgumentParser()
parser.add_argument('-e', '--env', required=True,
                    help='environment to use')
parser.add_argument('-j', '--processes', default=6, type=int,
                    help='number of parallel processes to build with')
parser.add_argument('specfile',
                    help='spec specification to use with the environment')
parser.add_argument('logdir',
                    help='directory to store build data in')
args = parser.parse_args()

userfile = os.path.join(args.logdir, 'specs.txt')
installfile = NamedTemporaryFile(mode="w+")
check_call(["concretize", "-e", args.env, args.specfile, installfile.name, userfile])

with installfile as fd:
    specs = json.load(fd)

piscine = Pool(processes=args.processes)
success = all(piscine.map(install, [(args.env, s, args.logdir) for s in specs.keys()]))
piscine.close()
piscine.join()

sys.exit(0 if success else 1)
