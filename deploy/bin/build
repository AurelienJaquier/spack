#!/usr/bin/env spack-python
# vim: ft=python

from argparse import ArgumentParser
import json
import os
import shutil
import sys

import llnl.util.tty as tty

import spack.environment as ev
import spack.error
import spack.report


def run():
    """Factored out to prevent spack from catching exceptions and exiting
    with a zero exit code.
    """
    parser = ArgumentParser()
    parser.add_argument('--explicit', action='store_true',
                        help='mark installed package as explicit')
    parser.add_argument('-e', '--env', required=True,
                        help='environment to use')
    parser.add_argument('concretized_hash',
                        help='spec hash to install within the environment')
    parser.add_argument('logdir',
                        help='directory to store build logs in')
    args = parser.parse_args()

    env = ev.get_env(args, 'deploy', required=True)
    specs = {}
    for spec in env.specs_by_hash.values():
        for s in spec.traverse():
            build_hash = s.build_hash()
            if build_hash not in specs:
                specs[build_hash] = s

    spec = specs[args.concretized_hash]

    # Fake it until you make it!
    args.cdash_upload_url = None

    reporter = spack.report.collect_info('junit', args)
    reporter.filename = os.path.join(
        args.logdir,
        'stack-{x.name}-{x.version}-{h}.xml'.format(
            x=spec,
            h=args.concretized_hash[:6]
        )
    )
    reporter.specs = [spec]

    success = True
    with reporter:
        try:
            env._install(spec, explicit=args.explicit, fail_fast=True)
        except spack.error.SpackError:
            success = False
            raise
    errors = 0
    for spec in reporter.collector.specs:
        errors += spec.get("nfailures", 0) + spec.get("nerrors", 0)
    return success and errors == 0


if __name__ == "__main__":
    no_fail = False
    try:
        no_fail = run()
    except e:
        tty.die(e)
    finally:
        sys.exit(0 if no_fail else 1)
